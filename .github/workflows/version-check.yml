name: üîç Version Check

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'shared/build.gradle.kts'

jobs:
  check-version:
    name: üîç Check Version Update
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Check version changes
        run: |
          # Get current version from PR
          PR_VERSION=$(grep 'version = ' shared/build.gradle.kts | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          
          # Get main branch version
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:shared/build.gradle.kts | grep 'version = ' | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          
          echo "üìã Version Check Results:"
          echo "  Main branch version: $MAIN_VERSION"
          echo "  PR version: $PR_VERSION"
          
          # Validate semantic versioning
          if ! echo "$PR_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå PR version '$PR_VERSION' does not follow semantic versioning"
            echo "Please use format: MAJOR.MINOR.PATCH (e.g., 1.0.0, 1.0.1, 1.1.0)"
            exit 1
          fi
          
          # Check if version was updated
          if [ "$PR_VERSION" = "$MAIN_VERSION" ]; then
            echo "‚ö†Ô∏è Version was not updated in this PR"
            echo "If this PR should trigger a release, please update the version in shared/build.gradle.kts"
            echo "Use the script: ./scripts/update-version.sh <new-version>"
            # Don't fail, just warn
          else
            echo "‚úÖ Version updated from $MAIN_VERSION to $PR_VERSION"
            
            # Check if version is greater
            if ! printf '%s\n%s\n' "$MAIN_VERSION" "$PR_VERSION" | sort -V -C; then
              echo "‚úÖ Version increased correctly"
            else
              echo "‚ö†Ô∏è New version ($PR_VERSION) should typically be greater than current version ($MAIN_VERSION)"
            fi
          fi

      - name: üìù Add comment to PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            // Get version info
            const prVersion = require('child_process')
              .execSync("grep 'version = ' shared/build.gradle.kts | head -1 | sed 's/.*version = \"\\(.*\\)\".*/\\1/'")
              .toString().trim();
            
            const mainVersion = require('child_process')
              .execSync("git show origin/main:shared/build.gradle.kts | grep 'version = ' | head -1 | sed 's/.*version = \"\\(.*\\)\".*/\\1/'")
              .toString().trim();
            
            const versionChanged = prVersion !== mainVersion;
            
            const body = `## üîç Version Check Results
            
            | Aspect | Value |
            |--------|-------|
            | Main Branch Version | \`${mainVersion}\` |
            | PR Version | \`${prVersion}\` |
            | Version Changed | ${versionChanged ? '‚úÖ Yes' : '‚ö†Ô∏è No'} |
            
            ${versionChanged ? 
              `### ‚úÖ Version Updated
              
              This PR updates the version from \`${mainVersion}\` to \`${prVersion}\`.
              
              **What happens next:**
              1. When this PR is merged to main, a new release will be automatically created
              2. The library will be published to Maven Central
              3. GitHub release notes will be generated
              
              ` : 
              `### ‚ö†Ô∏è No Version Change
              
              This PR does not update the version number.
              
              **If you want to create a release:**
              1. Update the version in \`shared/build.gradle.kts\`
              2. Or use the helper script: \`./scripts/update-version.sh <new-version>\`
              3. Follow semantic versioning (e.g., 1.0.0, 1.0.1, 1.1.0)
              
              `}
            
            ---
            
            üí° **Tip:** Use [semantic versioning](https://semver.org/) for version numbers:
            - **PATCH** (x.x.X): Bug fixes
            - **MINOR** (x.X.x): New features (backward compatible)  
            - **MAJOR** (X.x.x): Breaking changes`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.body.includes('## üîç Version Check Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }