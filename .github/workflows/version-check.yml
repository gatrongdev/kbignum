name: üîç Version Check

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'shared/build.gradle.kts'

permissions:
  contents: read

jobs:
  check-version:
    name: üîç Check Version Update
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: üîç Check version changes
        run: |
          # Get current version from PR
          PR_VERSION=$(grep 'version = ' shared/build.gradle.kts | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          
          # Get main branch version
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:shared/build.gradle.kts | grep 'version = ' | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          
          echo "üìã Version Check Results:"
          echo "  Main branch version: $MAIN_VERSION"
          echo "  PR version: $PR_VERSION"
          
          # Create summary
          echo "## üîç Version Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Aspect | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Main Branch Version | \`$MAIN_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| PR Version | \`$PR_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          
          # Validate semantic versioning
          if ! echo "$PR_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå PR version '$PR_VERSION' does not follow semantic versioning"
            echo "Please use format: MAJOR.MINOR.PATCH (e.g., 1.0.0, 1.0.1, 1.1.0)"
            echo "| Version Format | ‚ùå Invalid |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Error**: Version '$PR_VERSION' does not follow semantic versioning" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please use format: MAJOR.MINOR.PATCH (e.g., 1.0.0, 1.0.1, 1.1.0)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "| Version Format | ‚úÖ Valid |" >> $GITHUB_STEP_SUMMARY
          
          # Check if version was updated
          if [ "$PR_VERSION" = "$MAIN_VERSION" ]; then
            echo "‚ö†Ô∏è Version was not updated in this PR"
            echo "If this PR should trigger a release, please update the version in shared/build.gradle.kts"
            echo "Use the script: ./scripts/update-version.sh <new-version>"
            echo "| Version Changed | ‚ö†Ô∏è No |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ö†Ô∏è No Version Change" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR does not update the version number." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**If you want to create a release:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Update the version in \`shared/build.gradle.kts\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Or use the helper script: \`./scripts/update-version.sh <new-version>\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Follow semantic versioning (e.g., 1.0.0, 1.0.1, 1.1.0)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ Version updated from $MAIN_VERSION to $PR_VERSION"
            echo "| Version Changed | ‚úÖ Yes |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Version Updated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR updates the version from \`$MAIN_VERSION\` to \`$PR_VERSION\`." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**What happens next:**" >> $GITHUB_STEP_SUMMARY
            echo "1. When this PR is merged to main, a new release will be automatically created" >> $GITHUB_STEP_SUMMARY
            echo "2. The library will be published to Maven Central" >> $GITHUB_STEP_SUMMARY
            echo "3. GitHub release notes will be generated" >> $GITHUB_STEP_SUMMARY
            
            # Check if version is greater
            if printf '%s\n%s\n' "$MAIN_VERSION" "$PR_VERSION" | sort -V -C; then
              echo "‚úÖ Version increased correctly"
              echo "| Version Order | ‚úÖ Increased |" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è New version ($PR_VERSION) should typically be greater than current version ($MAIN_VERSION)"
              echo "| Version Order | ‚ö†Ô∏è Check needed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Tip:** Use [semantic versioning](https://semver.org/) for version numbers:" >> $GITHUB_STEP_SUMMARY
          echo "- **PATCH** (x.x.X): Bug fixes" >> $GITHUB_STEP_SUMMARY
          echo "- **MINOR** (x.X.x): New features (backward compatible)" >> $GITHUB_STEP_SUMMARY
          echo "- **MAJOR** (X.x.x): Breaking changes" >> $GITHUB_STEP_SUMMARY