name: 🚀 Release & Publish

on:
  workflow_run:
    workflows: ["🔄 CI/CD Pipeline"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxMetaspaceSize=512m"

jobs:
  check-ci-success:
    name: 🔍 Check CI Success
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
    
    steps:
      - name: ✅ Verify CI success
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "🔧 Manual trigger - proceeding with release check"
          elif [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "✅ CI passed - proceeding with release check"
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "❌ CI failed - blocking release"
            exit 1
          fi

  check-version-change:
    name: 🔍 Check Version Change
    runs-on: ubuntu-latest
    needs: check-ci-success
    if: needs.check-ci-success.outputs.should_proceed == 'true'
    outputs:
      has_version_change: ${{ steps.version_change.outputs.has_change }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2
      
      - name: 🔍 Check if version changed
        id: version_change
        run: |
          # Check if build.gradle.kts was modified in the last commit
          if git diff HEAD~1 HEAD --name-only | grep -q "shared/build.gradle.kts"; then
            echo "has_change=true" >> $GITHUB_OUTPUT
            echo "✅ Version file changed - proceeding with release"
          else
            echo "has_change=false" >> $GITHUB_OUTPUT
            echo "⏭️ No version change detected - skipping release"
          fi
  version-check:
    name: 🔍 Version Check
    runs-on: ubuntu-latest
    needs: check-version-change
    if: needs.check-version-change.outputs.has_version_change == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.tag_check.outputs.should_release }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔍 Get version from gradle
        id: version
        run: |
          VERSION=$(grep 'version = ' shared/build.gradle.kts | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Current version: $VERSION"

      - name: ✅ Check if should release
        id: tag_check
        run: |
          if git tag | grep -q "^v${{ steps.version.outputs.version }}$"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "⏭️ Tag v${{ steps.version.outputs.version }} already exists - skipping release"
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "✅ Tag v${{ steps.version.outputs.version }} does not exist - will create release"
          fi

  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should_release == 'true'
    outputs:
      release_created: ${{ steps.release_status.outputs.release_created }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: ☕ Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🐘 Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: 🔨 Build and test
        run: ./gradlew clean build test

      - name: 📝 Generate changelog
        id: changelog
        run: |
          VERSION="v${{ needs.version-check.outputs.version }}"
          
          # Get the latest tag or use initial commit
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "📋 Generating changelog from $PREVIOUS_TAG to HEAD"
          
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --no-merges)
          
          # Create changelog
          cat << EOF > changelog.md
          ## 🚀 What's New in $VERSION

          ### 📋 Changes
          $COMMITS

          ### 📦 Installation

          #### Gradle (Kotlin DSL)
          \`\`\`kotlin
          dependencies {
              implementation("io.github.gatrongdev:kbignum:${{ needs.version-check.outputs.version }}")
          }
          \`\`\`

          #### Gradle (Groovy)
          \`\`\`gradle
          dependencies {
              implementation 'io.github.gatrongdev:kbignum:${{ needs.version-check.outputs.version }}'
          }
          \`\`\`

          ### 🔗 Links
          - 📚 [Documentation](https://gatrongdev.github.io/kbignum/)
          - 📦 [Maven Central](https://central.sonatype.com/artifact/io.github.gatrongdev/kbignum)

          **Full Changelog**: https://github.com/gatrongdev/kbignum/compare/$PREVIOUS_TAG...$VERSION
          EOF
          
          CHANGELOG=$(cat changelog.md)
          
          # Save changelog (escape newlines for GitHub Actions)
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          name: KBigNum v${{ needs.version-check.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.version-check.outputs.version, '-') }}
          files: |
            shared/build/libs/*.jar
            shared/build/outputs/**/*.aar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Release created
        id: release_status
        run: |
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "🎉 Successfully created release v${{ needs.version-check.outputs.version }}"

  publish-maven:
    name: 📦 Publish to Maven Central
    runs-on: macOS-latest
    needs: [version-check, create-release]
    if: needs.version-check.outputs.should_release == 'true' && needs.create-release.outputs.release_created == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: ☕ Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21

      - name: 🐘 Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: 📦 Publish to Maven Central
        run: ./gradlew publishToMavenCentral --no-configuration-cache
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY_CONTENTS }}

      - name: ✅ Maven publish completed
        run: |
          echo "📦 Successfully published v${{ needs.version-check.outputs.version }} to Maven Central"
          echo "🔗 Check: https://central.sonatype.com/artifact/io.github.gatrongdev/kbignum"

  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    needs: [version-check, create-release]
    if: needs.version-check.outputs.should_release == 'true' && needs.create-release.outputs.release_created == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: ☕ Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🐘 Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: 📚 Generate documentation
        run: ./gradlew dokkaHtml

      - name: 📤 Upload documentation artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './shared/build/dokka/html'

      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: ✅ Documentation deployed
        run: |
          echo "📚 Documentation deployed successfully"
          echo "🔗 View at: https://gatrongdev.github.io/kbignum/"

  release-summary:
    name: 📋 Release Summary
    runs-on: ubuntu-latest
    needs: [check-ci-success, check-version-change, version-check, create-release, publish-maven, deploy-docs]
    if: always()
    
    steps:
      - name: 📊 Generate release summary
        run: |
          echo "## 🚀 Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CI Success Check | ${{ needs.check-ci-success.result == 'success' && '✅ Passed' || needs.check-ci-success.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Change Check | ${{ needs.check-version-change.result == 'success' && '✅ Detected' || needs.check-version-change.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Check | ${{ needs.version-check.result == 'success' && '✅ Completed' || needs.version-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result == 'success' && '✅ Created' || needs.create-release.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Maven Publish | ${{ needs.publish-maven.result == 'success' && '✅ Published' || needs.publish-maven.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.deploy-docs.result == 'success' && '✅ Deployed' || needs.deploy-docs.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check-ci-success.outputs.should_proceed }}" != "true" ]; then
            echo "### ❌ Release Blocked" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Release was blocked because CI/CD pipeline failed." >> $GITHUB_STEP_SUMMARY
            echo "✅ Fix the issues and push again to trigger release." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.check-version-change.outputs.has_version_change }}" != "true" ]; then
            echo "### ⏭️ No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No version change detected in shared/build.gradle.kts." >> $GITHUB_STEP_SUMMARY
            echo "Update the version to trigger a release." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.version-check.outputs.should_release }}" = "true" ]; then
            echo "### 🎉 Release v${{ needs.version-check.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ [GitHub Release](https://github.com/gatrongdev/kbignum/releases/tag/v${{ needs.version-check.outputs.version }})" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 [Maven Central](https://central.sonatype.com/artifact/io.github.gatrongdev/kbignum)" >> $GITHUB_STEP_SUMMARY
            echo "- 📚 [Documentation](https://gatrongdev.github.io/kbignum/)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⏭️ Release Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Version v${{ needs.version-check.outputs.version }} already exists." >> $GITHUB_STEP_SUMMARY
          fi

